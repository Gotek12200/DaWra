---
title: "Text clustering"
author: 
  - Osaro Orebor 1168827
  - Máté Csikós-Nagy 4395565
  - Fani Profiti 1240390
  - Yara Yachnyk 4913329
  - Niels Wagenaar 3133998
date: last-modified
format:
  html:
    toc: true
    self-contained: true
    code-fold: true
    df-print: kable
execute:
  warning: false
  message: false
  echo: true
---

```{r}
#| label: R packages
#| echo: false
#| warning: false
#| message: false

library(text2vec)
library(wordcloud)
library(magrittr)
library(tm)
library(dplyr)
library(tidyverse)
library(tidytext)
library(stringr)

# additional packages here
```

```{r}
#| label: data loading

data("movie_review")

# your R code to load the data here
```

```{r}
glimpse(movie_review) #take a quick glance at data
summary(movie_review) 
sapply(movie_review, class) #identify classes of dataset variables for sentiment analysis
table(movie_review$sentiment) #see the distribution of negative and positive reviews
```

# Data description
Based on the dataset "movie_review" embedded in text2vec package, we see the selection of positive and negative reviews of movie viewers, relatively evenly distributed in the dataset (2483 negative and 2517 positive reviews) denoted with score 1 if the IMDB rating was >= 7 or 0 if rating is <5 accordingly.



Describe the data and use a visualization to support your story. (approx. one or two paragraphs

```{r}
#| label: eda visualization
#| warning: false

# your R code to generate the plot here
movie_review %$% wordcloud(review, 
                           min.freq = 10, 
                           max.words = 50, 
                           random.order = FALSE,
                           colors = brewer.pal(8, "Dark2"))

```

# Text pre-processing

For better analysis we will further on clean the text from review column based on selected pre-processing methods.
But first, we will change sentiment column to factor class:

```{r}
movie_review$sentiment <- as.factor(movie_review$sentiment)
sapply(movie_review, class) #checking the factor change
```
Next, we will remove empty rows with no text or duplicates, which leaves us with 4996 observations.

```{r}
movie_review <- movie_review %>% 
  filter(!is.na(review)) %>%
  distinct(review, .keep_all = T)
```
Now, we will lowercase all the letters in the texts and remove punctuation:
```{r}
clean_movie_review <- movie_review %>%
  mutate(review = review %>%
      str_to_lower() %>% # induce lowercase
  str_replace_all("[[:punct:]]", " ") %>% #remove punctuation
  str_squish()) #remove extra space
```

Next, we will tokenise review column:


# Text representaion

Briefly describe your text representation method. (approx. one or two paragraphs)

# Text clustering

Briefly describe which models you compare to perform clustering. (approx. two or three paragraphs)

# Evaluation & model comparison

Describe how you compare the methods and why. (approx. two or three paragraphs)


```{r}
#| label: table example
data.frame(
  model       = c("clustering model 1", "clustering model 2"),
  performance = c(1.2, 1.8),
  other       = c(0.5, 0.3),
  notes       = c("Some note", "another note")
)
```


# Team member contributions

Write down what each team member contributed to the project.

- Author One: a, b, c
- Author Two: b, c, d
- Author Three: a, b, d
