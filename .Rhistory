ggplot(train, aes(x = score)) +
geom_histogram(fill = "skyblue", color = "white", bins = 20) +
theme_minimal() +
labs(title = "Distribution of Student Scores",
x = "Score", y = "Count")
# Summary statistics for numerical variables
train %>%
select(where(is.numeric)) %>%
summary()
# Compute correlation matrix for numeric variables
num_vars <- train %>% select(where(is.numeric)) %>% select(-score)
cor_mat <- cor(num_vars, use = "pairwise.complete.obs")
corrplot(cor_mat, method = "color", type = "upper", tl.cex = 0.8)
# Correlation of each numeric variable with score
correlations <- train %>%
select(where(is.numeric)) %>%
cor(use = "pairwise.complete.obs") %>%
as.data.frame() %>%
rownames_to_column("Variable") %>%
select(Variable, score) %>%
arrange(desc(abs(score)))
head(correlations, 10)
# Handle missing values
train_clean <- train %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Convert categorical variables to factors
train_clean <- train_clean %>%
mutate(across(where(is.character), as.factor))
glimpse(train_clean)
#check for outliers with the statistical approach
for (col_name in names(train_clean)) {
column <- train_clean[[col_name]]
# Check if column is numeric
if (is.numeric(column)) {
# Calculate mean and standard deviation
m <- mean(column, na.rm = TRUE)
s <- sd(column, na.rm = TRUE)
# Find outliers: values more than 3 standard deviations from the mean
outlier_indices <- which(abs(column - m) > 3 * s)
# Print results if outliers found
if (length(outlier_indices) > 0) {
cat("Outliers found in column:", col_name, "\n")
cat("Indices:", outlier_indices, "\n")
cat("Values:", column[outlier_indices], "\n\n")
# Plot with outliers highlighted
plot(column, main = paste("Outliers in", col_name),
col = ifelse(1:length(column) %in% outlier_indices, "red", "black"),
pch = ifelse(1:length(column) %in% outlier_indices, 19, 1),
ylab = col_name, xlab = "Index")
legend("topright", legend = c("Outlier", "Normal"), col = c("red", "black"), pch = c(19, 1))
}
}
}
#KNN regression with the outliers
model <- train.kknn(
score ~ .,
data = train_clean,
k=5
model <- train.kknn(
# Load necessary packages
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(corrplot)
library(GGally)
library(janitor)
# Load data
train <- readRDS("train.rds")
test <- readRDS("test.rds")
# Preview the data
glimpse(train)
summary(train)
#Missing Values
train %>% summarise(across(everything(), ~sum(is.na(.)))) %>%
pivot_longer(everything(), names_to = "variable", values_to = "missing_count") %>%
arrange(desc(missing_count))
ggplot(train, aes(x = score)) +
geom_histogram(fill = "skyblue", color = "white", bins = 20) +
theme_minimal() +
labs(title = "Distribution of Student Scores",
x = "Score", y = "Count")
# Summary statistics for numerical variables
train %>%
select(where(is.numeric)) %>%
summary()
# Compute correlation matrix for numeric variables
num_vars <- train %>% select(where(is.numeric)) %>% select(-score)
cor_mat <- cor(num_vars, use = "pairwise.complete.obs")
corrplot(cor_mat, method = "color", type = "upper", tl.cex = 0.8)
# Correlation of each numeric variable with score
correlations <- train %>%
select(where(is.numeric)) %>%
cor(use = "pairwise.complete.obs") %>%
as.data.frame() %>%
rownames_to_column("Variable") %>%
select(Variable, score) %>%
arrange(desc(abs(score)))
head(correlations, 10)
# Handle missing values
train_clean <- train %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Convert categorical variables to factors
train_clean <- train_clean %>%
mutate(across(where(is.character), as.factor))
glimpse(train_clean)
#check for outliers with the statistical approach
for (col_name in names(train_clean)) {
column <- train_clean[[col_name]]
# Check if column is numeric
if (is.numeric(column)) {
# Calculate mean and standard deviation
m <- mean(column, na.rm = TRUE)
s <- sd(column, na.rm = TRUE)
# Find outliers: values more than 3 standard deviations from the mean
outlier_indices <- which(abs(column - m) > 3 * s)
# Print results if outliers found
if (length(outlier_indices) > 0) {
cat("Outliers found in column:", col_name, "\n")
cat("Indices:", outlier_indices, "\n")
cat("Values:", column[outlier_indices], "\n\n")
# Plot with outliers highlighted
plot(column, main = paste("Outliers in", col_name),
col = ifelse(1:length(column) %in% outlier_indices, "red", "black"),
pch = ifelse(1:length(column) %in% outlier_indices, 19, 1),
ylab = col_name, xlab = "Index")
legend("topright", legend = c("Outlier", "Normal"), col = c("red", "black"), pch = c(19, 1))
}
}
}
# Create a logical vector to mark rows to keep (start with all TRUE)
rows_to_keep <- rep(TRUE, nrow(train_clean))
# Loop through numeric columns
for (col_name in names(train_clean)) {
column <- train_clean[[col_name]]
if (is.numeric(column)) {
m <- mean(column, na.rm = TRUE)
s <- sd(column, na.rm = TRUE)
# Identify outlier indices in this column
outlier_indices <- which(abs(column - m) > 3 * s)
if (length(outlier_indices) > 0) {
# Mark these rows as FALSE (to be removed)
rows_to_keep[outlier_indices] <- FALSE
}
}
}
# Subset the data to remove outliers in any numeric column
train_clean_no_outliers <- train_clean[rows_to_keep, ]
#KNN regression without the outliers
library(kknn)
model <- train.kknn(
score ~ .,
data = train_clean_no_outliers,
kmax = 10
)
pred <- predict(model, newdata =test)
#KNN regression with the outliers
model <- train.kknn(
score ~ .,
data = train_clean,
k=5
)
OutVals = boxplot(train_clean)$out
which(train_clean %in% OutVals)
boxplot(dat$train_clean,
ylab = "train_clean"
)
boxplot(data(train_clean)$train_clean,
ylab = "train_clean"
)
train_clean.boxplot()
# Load necessary packages
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(corrplot)
library(GGally)
library(janitor)
# Load data
train <- readRDS("train.rds")
test <- readRDS("test.rds")
# Preview the data
glimpse(train)
summary(train)
#Missing Values
train %>% summarise(across(everything(), ~sum(is.na(.)))) %>%
pivot_longer(everything(), names_to = "variable", values_to = "missing_count") %>%
arrange(desc(missing_count))
ggplot(train, aes(x = score)) +
geom_histogram(fill = "skyblue", color = "white", bins = 20) +
theme_minimal() +
labs(title = "Distribution of Student Scores",
x = "Score", y = "Count")
# Summary statistics for numerical variables
train %>%
select(where(is.numeric)) %>%
summary()
# Compute correlation matrix for numeric variables
num_vars <- train %>% select(where(is.numeric)) %>% select(-score)
cor_mat <- cor(num_vars, use = "pairwise.complete.obs")
corrplot(cor_mat, method = "color", type = "upper", tl.cex = 0.8)
# Correlation of each numeric variable with score
correlations <- train %>%
select(where(is.numeric)) %>%
cor(use = "pairwise.complete.obs") %>%
as.data.frame() %>%
rownames_to_column("Variable") %>%
select(Variable, score) %>%
arrange(desc(abs(score)))
head(correlations, 10)
# Handle missing values
train_clean <- train %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Convert categorical variables to factors
train_clean <- train_clean %>%
mutate(across(where(is.character), as.factor))
glimpse(train_clean)
# Create a logical vector to mark rows to keep (start with all TRUE)
x <- rep(TRUE, nrow(train_clean))
# Loop through numeric columns
for (col_name in names(train_clean)) {
column <- train_clean[[col_name]]
if (is.numeric(column)) {
m <- mean(column, na.rm = TRUE)
s <- sd(column, na.rm = TRUE)
# Identify outlier indices in this column
outlier<- which(abs(column - m) > 3 * s)
if (length(outlier) > 0) {
# Mark these rows as FALSE (to be removed)
x[outlier] <- FALSE
}
}
}
# Subset the data to remove outliers in any numeric column
train_clean_no_outliers <- train_clean[x, ]
#check for outliers with the statistical approach
for (col_name in names(train_clean)) {
column <- train_clean[[col_name]]
# Check if column is numeric
if (is.numeric(column)) {
# Calculate mean and standard deviation
m <- mean(column, na.rm = TRUE)
s <- sd(column, na.rm = TRUE)
# Find outliers: values more than 3 standard deviations from the mean
outlier <- which(abs(column - m) > 3 * s)
# Print results if outliers found
if (length(outlier) > 0) {
cat("Outliers found in column:", col_name, "\n")
cat("Indices:", outlier, "\n")
cat("Values:", column[outlier], "\n\n")
# Plot with outliers highlighted
plot(column, main = paste("Outliers in", col_name),
col = ifelse(1:length(column) %in% outlier, "red", "black"),
pch = ifelse(1:length(column) %in% outlier, 19, 1),
ylab = col_name, xlab = "Index")
legend("topright", legend = c("Outlier", "Normal"), col = c("red", "black"), pch = c(19, 1))
}
}
}
# Create a logical vector to mark rows to keep (start with all TRUE)
x <- rep(TRUE, nrow(train_clean))
# Loop through numeric columns
for (col_name in names(train_clean)) {
column <- train_clean[[col_name]]
if (is.numeric(column)) {
m <- mean(column, na.rm = TRUE)
s <- sd(column, na.rm = TRUE)
# Identify outlier indices in this column
outlier<- which(abs(column - m) > 3 * s)
if (length(outlier) > 0) {
# Mark these rows as FALSE (to be removed)
x[outlier] <- FALSE
}
}
}
# Subset the data to remove outliers in any numeric column
train_clean_no_outliers <- train_clean[x, ]
#KNN regression without the outliers
library(kknn)
model <- train.kknn(
score ~ .,
data = train_clean_no_outliers,
kmax = 10
)
pred <- predict(model, newdata =test)
pred
#KNN regression with the outliers
model <- train.kknn(
score ~ .,
data = train_clean,
kmax=10
)
pred_with_outliers <- predict(model, newdata =test)
pred_with_outliers
#Check the impact of outliers
differences <- pred - pred_with_outliers
summary(differences)
# Plot with outliers highlighted
plot(column, main = paste("Outliers in", col_name),
col = ifelse(1:length(column) %in% outlier, "pink", "black"),
pch = ifelse(1:length(column) %in% outlier, 19, 1),
ylab = col_name, xlab = "Index")
legend("topright", legend = c("Outlier", "Normal"), col = c("pink", "black"), pch = c(19, 1))
}
# Plot with outliers highlighted
plot(column, main = paste("Outliers in", col_name),
col = ifelse(1:length(column) %in% outlier, "pink", "black"),
pch = ifelse(1:length(column) %in% outlier, 19, 1),
ylab = col_name, xlab = "Index")
legend("topright", legend = c("Outlier", "Normal"), col = c("pink", "black"), pch = c(19, 1))
}
# Create a logical vector to mark rows to keep (start with all TRUE)
x <- rep(TRUE, nrow(train_clean))
x
for (col_name in names(train_clean)) {
column <- train_clean[[col_name]]
# Check if column is numeric
if (is.numeric(column)) {
# Calculate mean and standard deviation
m <- mean(column, na.rm = TRUE)
s <- sd(column, na.rm = TRUE)
# Find outliers: values more than 3 standard deviations from the mean
outlier <- which(abs(column - m) > 3 * s)
# Print results if outliers found
if (length(outlier) > 0) {
cat("Outliers found in column:", col_name, "\n")
cat("Indices:", outlier, "\n")
cat("Values:", column[outlier], "\n\n")
# Plot with outliers highlighted
plot(column, main = paste("Outliers in", col_name),
col = ifelse(1:length(column) %in% outlier, "pink", "black"),
pch = ifelse(1:length(column) %in% outlier, 19, 1),
ylab = col_name, xlab = "Index")
legend("topright", legend = c("Outlier", "Normal"), col = c("pink", "black"), pch = c(19, 1))
}
}
}
# Load necessary packages
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(corrplot)
library(GGally)
library(janitor)
# Load data
train <- readRDS("train.rds")
test <- readRDS("test.rds")
# Preview the data
glimpse(train)
summary(train)
#Missing Values
train %>% summarise(across(everything(), ~sum(is.na(.)))) %>%
pivot_longer(everything(), names_to = "variable", values_to = "missing_count") %>%
arrange(desc(missing_count))
ggplot(train, aes(x = score)) +
geom_histogram(fill = "skyblue", color = "white", bins = 20) +
theme_minimal() +
labs(title = "Distribution of Student Scores",
x = "Score", y = "Count")
# Summary statistics for numerical variables
train %>%
select(where(is.numeric)) %>%
summary()
# Compute correlation matrix for numeric variables
num_vars <- train %>% select(where(is.numeric)) %>% select(-score)
cor_mat <- cor(num_vars, use = "pairwise.complete.obs")
corrplot(cor_mat, method = "color", type = "upper", tl.cex = 0.8)
# Correlation of each numeric variable with score
correlations <- train %>%
select(where(is.numeric)) %>%
cor(use = "pairwise.complete.obs") %>%
as.data.frame() %>%
rownames_to_column("Variable") %>%
select(Variable, score) %>%
arrange(desc(abs(score)))
head(correlations, 10)
# Handle missing values
train_clean <- train %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Convert categorical variables to factors
train_clean <- train_clean %>%
mutate(across(where(is.character), as.factor))
glimpse(train_clean)
for (col_name in names(train_clean)) {
column <- train_clean[[col_name]]
# Check if column is numeric
if (is.numeric(column)) {
# Calculate mean and standard deviation
m <- mean(column, na.rm = TRUE)
s <- sd(column, na.rm = TRUE)
# Find outliers: values more than 3 standard deviations from the mean
outlier <- which(abs(column - m) > 3 * s)
# Print results if outliers found
if (length(outlier) > 0) {
cat("Outliers found in column:", col_name, "\n")
cat("Indices:", outlier, "\n")
cat("Values:", column[outlier], "\n\n")
# Plot with outliers highlighted
plot(column, main = paste("Outliers in", col_name),
col = ifelse(1:length(column) %in% outlier, "pink", "black"),
pch = ifelse(1:length(column) %in% outlier, 19, 1),
ylab = col_name, xlab = "Index")
legend("topright", legend = c("Outlier", "Normal"), col = c("pink", "black"), pch = c(19, 1))
}
}
}
# Create a logical vector to mark rows to keep (start with all TRUE)
x <- rep(TRUE, nrow(train_clean))
# Loop through numeric columns
for (col_name in names(train_clean)) {
column <- train_clean[[col_name]]
if (is.numeric(column)) {
m <- mean(column, na.rm = TRUE)
s <- sd(column, na.rm = TRUE)
# Identify outlier indices in this column
outlier <- which(abs(column - m) > 3 * s)
if (length(outlier) > 0) {
# Mark these rows as FALSE (to be removed)
x[outlier] <- FALSE
}
}
}
# Subset the data to remove outliers in any numeric column
train_clean_no_outliers <- train_clean[x, ]
#check for outliers with the statistical approach
for (col_name in names(train_clean)) {
column <- train_clean[[col_name]]
# Check if column is numeric
if (is.numeric(column)) {
# Calculate mean and standard deviation
m <- mean(column, na.rm = TRUE)
s <- sd(column, na.rm = TRUE)
# Find outliers: values more than 3 standard deviations from the mean
outlier <- which(abs(column - m) > 3 * s)
# Print results if outliers found
if (length(outlier) > 0) {
cat("Outliers found in column:", col_name, "\n")
cat("Indices:", outlier, "\n")
cat("Values:", column[outlier], "\n\n")
# Plot with outliers highlighted
boxplot(column, main = paste("Outliers in", col_name),
col = ifelse(1:length(column) %in% outlier, "pink", "black"),
pch = ifelse(1:length(column) %in% outlier, 19, 1),
ylab = col_name, xlab = "Index")
legend("topright", legend = c("Outlier", "Normal"), col = c("pink", "black"), pch = c(19, 1))
}
}
}
# Create a logical vector to mark rows to keep (start with all TRUE)
x <- rep(TRUE, nrow(train_clean))
# Loop through numeric columns
for (col_name in names(train_clean)) {
column <- train_clean[[col_name]]
if (is.numeric(column)) {
m <- mean(column, na.rm = TRUE)
s <- sd(column, na.rm = TRUE)
# Identify outlier indices in this column
outlier <- which(abs(column - m) > 3 * s)
if (length(outlier) > 0) {
# Mark these rows as FALSE (to be removed)
x[outlier] <- FALSE
}
}
}
# Subset the data to remove outliers in any numeric column
train_clean_no_outliers <- train_clean[x, ]
#check for outliers with the statistical approach
for (col_name in names(train_clean)) {
column <- train_clean[[col_name]]
# Check if column is numeric
if (is.numeric(column)) {
# Calculate mean and standard deviation
m <- mean(column, na.rm = TRUE)
s <- sd(column, na.rm = TRUE)
# Find outliers: values more than 3 standard deviations from the mean
outlier <- which(abs(column - m) > 3 * s)
# Print results if outliers found
if (length(outlier) > 0) {
cat("Outliers found in column:", col_name, "\n")
cat("Indices:", outlier, "\n")
cat("Values:", column[outlier], "\n\n")
# Plot with outliers highlighted
boxplot(column, main = paste("Outliers in", col_name),
col = ifelse(1:length(column) %in% outlier, "pink", "black"),
pch = ifelse(1:length(column) %in% outlier, 19, 1),
ylab = col_name, xlab = "Index")
legend("topright", legend = c("Outlier", "Normal"), col = c("pink", "black"), pch = c(19, 1))
}
}
}
# Create a logical vector to mark rows to keep (start with all TRUE)
x <- rep(TRUE, nrow(train_clean))
# Loop through numeric columns
for (col_name in names(train_clean)) {
column <- train_clean[[col_name]]
if (is.numeric(column)) {
m <- mean(column, na.rm = TRUE)
s <- sd(column, na.rm = TRUE)
# Identify outlier indices in this column
outlier <- which(abs(column - m) > 3 * s)
if (length(outlier) > 0) {
# Mark these rows as FALSE (to be removed)
x[outlier] <- FALSE
}
}
}
plot(column, main = paste("Outliers in", col_name),
col = ifelse(1:length(column) %in% outlier, "pink", "black"),
pch = ifelse(1:length(column) %in% outlier, 19, 1),
ylab = col_name, xlab = "Index")
