---
title: "Supervised learning competition"
author: 
  - Osaro Orebor 1168827
  - Author Two
  - Author Three
date: 1010-2025 12:00 AM
format:
  html:
    toc: true
    self-contained: true
    code-fold: true
    df-print: kable
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
# Load necessary packages
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(corrplot)
library(GGally)
library(janitor)
```

You can add options to executable code like this

```{r}

# Load data
train <- readRDS("train.rds")
test <- readRDS("test.rds")
```

```{r}

# Preview the data
glimpse(train)
summary(train)

```


```{r}
#Missing Values
train %>% summarise(across(everything(), ~sum(is.na(.)))) %>%
  pivot_longer(everything(), names_to = "variable", values_to = "missing_count") %>%
  arrange(desc(missing_count))

```

```{r}
ggplot(train, aes(x = score)) +
  geom_histogram(fill = "skyblue", color = "white", bins = 20) +
  theme_minimal() +
  labs(title = "Distribution of Student Scores",
       x = "Score", y = "Count")

# Summary statistics for numerical variables
train %>% 
  select(where(is.numeric)) %>% 
  summary()

```

```{r}

# Compute correlation matrix for numeric variables
num_vars <- train %>% select(where(is.numeric)) %>% select(-score)
cor_mat <- cor(num_vars, use = "pairwise.complete.obs")

corrplot(cor_mat, method = "color", type = "upper", tl.cex = 0.8)

# Correlation of each numeric variable with score
correlations <- train %>%
  select(where(is.numeric)) %>%
  cor(use = "pairwise.complete.obs") %>%
  as.data.frame() %>%
  rownames_to_column("Variable") %>%
  select(Variable, score) %>%
  arrange(desc(abs(score)))

head(correlations, 10)


```
```{r}


# Handle missing values
train_clean <- train %>%
  mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))

# Convert categorical variables to factors
train_clean <- train_clean %>%
  mutate(across(where(is.character), as.factor))

glimpse(train_clean)



```
#check for outliers with the statistical approach
for (col_name in names(train_clean)) {
  column <- train_clean[[col_name]]
  
# Check if column is numeric
  if (is.numeric(column)) {
    
# Calculate mean and standard deviation
    m <- mean(column, na.rm = TRUE)
    s <- sd(column, na.rm = TRUE)
    
# Find outliers: values more than 3 standard deviations from the mean
    outlier_indices <- which(abs(column - m) > 3 * s)
    
# Print results if outliers found
    if (length(outlier_indices) > 0) {
      cat("Outliers found in column:", col_name, "\n")
      cat("Indices:", outlier_indices, "\n")
      cat("Values:", column[outlier_indices], "\n\n")
      
# Plot with outliers highlighted
      plot(column, main = paste("Outliers in", col_name),
           col = ifelse(1:length(column) %in% outlier_indices, "red", "black"),
           pch = ifelse(1:length(column) %in% outlier_indices, 19, 1),
           ylab = col_name, xlab = "Index")
      legend("topright", legend = c("Outlier", "Normal"), col = c("red", "black"), pch = c(19, 1))
    }
  }
}

# Create a copy of the data to clean
train_clean_no_outliers <- train_clean

# Loop through numeric columns
for (col_name in names(train_clean)) {
  column <- train_clean_no_outliers[[col_name]]
  
  if (is.numeric(column)) {
    m <- mean(column, na.rm = TRUE)
    s <- sd(column, na.rm = TRUE)
    
# Find indices of outliers
    outlier_indices <- which(abs(column - m) > 3 * s)
    
    if (length(outlier_indices) > 0) {
      cat("Removing outliers in column:", col_name, "\n")
      
# Remove rows with outliers in this column
      train_clean_no_outliers <- train_clean_no_outliers[-outlier_indices, ]
    }
  }
}

#KNN regression 
library(kknn)

model <- train.kknn(
  score ~ .,
  data = train_clean_no_outliers,
  kmax = 10
)

pred <- predict(model, newdata =test)



```
The `echo: false` option disables the printing of code (only output is displayed).
